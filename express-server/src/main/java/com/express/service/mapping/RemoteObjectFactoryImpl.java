package com.express.service.mapping;import com.express.dao.ProjectDao;import com.express.domain.AccessRequest;import com.express.domain.BacklogItem;import com.express.domain.Iteration;import com.express.domain.Project;import com.express.domain.Theme;import com.express.domain.User;import com.express.service.dto.AccessRequestDto;import com.express.service.dto.BacklogItemDto;import com.express.service.dto.IterationDto;import com.express.service.dto.ProjectDto;import com.express.service.dto.ProjectWorkerDto;import com.express.service.dto.ThemeDto;import com.express.service.dto.UserDto;import org.dozer.Mapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.Collections;import java.util.HashSet;import java.util.List;import java.util.Set;@Service("remoteObjectFactory")public class RemoteObjectFactoryImpl implements RemoteObjectFactory {      private final Mapper beanMapper;   private final ProjectDao projectDao;   @Autowired   public RemoteObjectFactoryImpl(@Qualifier("beanMapper")Mapper beanMapper,                                  @Qualifier("projectDao")ProjectDao projectDao) {      this.beanMapper = beanMapper;      this.projectDao = projectDao;   }   public UserDto createUserDto(User user, Policy policy) {      UserDto userDto = beanMapper.map(user, UserDto.class, policy.getMapId(User.class));      List<Project> projects = projectDao.findAll(user);      userDto.setHasProjects(projects.size() > 0);      return userDto;   }   public ProjectDto createProjectDto(Project project, Policy policy) {      ProjectDto projectDto = beanMapper.map(project,                                        ProjectDto.class,                                        policy.getMapId(Project.class));      if(policy == Policy.DEEP) {         Set<String> actors = new HashSet<String>();         appendActors(actors, project.getProductBacklog());         for(Iteration iteration : project.getIterations()) {            appendActors(actors, iteration.getBacklog());         }         projectDto.setActors(new ArrayList<String>(actors));      }      if(projectDto.getProductBacklog() != null) {         Collections.sort(projectDto.getProductBacklog());      }      if(projectDto.getIterations() != null) {         Collections.sort(projectDto.getIterations());      }      if(projectDto.getHistory() != null) {         Collections.sort(projectDto.getHistory());      }      if(projectDto.getProjectWorkers() == null) {         projectDto.setProjectWorkers(new ArrayList<ProjectWorkerDto>());      }      return projectDto;   }   private void appendActors(Set<String> actors, Set<BacklogItem> items) {      for(BacklogItem item : items) {         actors.add(item.getAsA());      }   }   public IterationDto createIterationDto(Iteration iteration, Policy policy) {      IterationDto iterationDto = beanMapper.map(iteration,IterationDto.class,policy.getMapId(Iteration.class));      Collections.sort(iterationDto.getBacklog());      if(iteration.getHistory() != null) {         Collections.sort(iterationDto.getHistory());      }      return iterationDto;   }   public BacklogItemDto createBacklogItemDto(BacklogItem backlogItem, Policy policy) {      BacklogItemDto item = beanMapper.map(backlogItem,BacklogItemDto.class,policy.getMapId(BacklogItem.class));      Collections.sort(item.getThemes());      return item;   }   public ThemeDto createThemeDto(Theme theme) {      return beanMapper.map(theme, ThemeDto.class);   }   public AccessRequestDto createAccessRequestDto(AccessRequest request) {      return beanMapper.map(request, AccessRequestDto.class);   }}